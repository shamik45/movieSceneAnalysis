<?xml version = "1.0" encoding = "UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:amq="http://activemq.apache.org/schema/core"
       xmlns:rabbit="http://www.springframework.org/schema/rabbit"
       xmlns:jms="http://www.springframework.org/schema/jms"
       xmlns:q="http://www.springframework.org/schema/p"
       xsi:schemaLocation="http://www.springframework.org/schema/rabbit
        http://www.springframework.org/schema/rabbit/spring-rabbit.xsd
       http://www.springframework.org/schema/beans
   http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
   http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context-3.0.xsd
   http://www.springframework.org/schema/jms http://www.springframework.org/schema/jms/spring-jms-3.0.xsd
   http://activemq.apache.org/schema/core http://activemq.apache.org/schema/core/activemq-core.xsd">


    <context:property-placeholder location="classpath:application.properties" />

    <bean id="TokenGenerator" init-method="generateToken" class = "com.shamik.dev.cts.labweek.movieAnalysis.mpx.auth.tokenGenerator" >
        <property name = "username" value = "${account.username}"/>
        <property name = "password" value = "${account.password}"/>
        <property name = "account"   value = "${account.id}" />
    </bean>

    <bean id="NotificationConsumer" init-method="init" class="com.shamik.dev.cts.labweek.movieAnalysis.NotificationConsumer">
        <constructor-arg ref="myJmsTemplate"></constructor-arg>
        <property name="queueName" value="${activemq.workflow.processQueue}"></property>
    </bean>

    <bean id="NotificationPoller" init-method="init" class="com.shamik.dev.cts.labweek.movieAnalysis.NotificationPoller">
        <property name="workflowUrl" value="${workflow.url}"></property>
    </bean>

    <!--  lets create an embedded ActiveMQ Broker -->
    <amq:broker useJmx="false" persistent="false">
        <amq:transportConnectors>
            <amq:transportConnector uri="tcp://localhost:0" />
        </amq:transportConnectors>
    </amq:broker>

    <!-- JMS ConnectionFactory to use, configuring the embedded broker using XML -->
    <amq:connectionFactory id="jmsFactory" brokerURL="vm://localhost" trustAllPackages="true">
    </amq:connectionFactory>


    <!-- Spring JMS Template -->
    <bean id="myJmsTemplate" class="org.springframework.jms.core.JmsTemplate">
        <property name="connectionFactory">
            <!-- lets wrap in a pool to avoid creating a connection per send -->
            <bean class="org.springframework.jms.connection.SingleConnectionFactory">
                <property name="targetConnectionFactory">
                    <ref local="jmsFactory" />
                </property>
            </bean>
        </property>

    </bean>

    <bean id="jmsContainer" class="org.springframework.jms.listener.DefaultMessageListenerContainer">
        <property name="connectionFactory" ref="jmsFactory" />
        <property name="destinationName" value="${activemq.workflow.processQueue}" />
        <property name="messageListener" ref="WorkflowReceiver" />
    </bean>

    <bean id="jmsContainer1" class="org.springframework.jms.listener.DefaultMessageListenerContainer">
        <property name="connectionFactory" ref="jmsFactory" />
        <property name="destinationName" value="${activemq.aws.rekognition.ingestQueue}" />
        <property name="messageListener" ref="AWSRekognitionProcessor1" />
    </bean>

    <bean id="jmsContainer2" class="org.springframework.jms.listener.DefaultMessageListenerContainer">
        <property name="connectionFactory" ref="jmsFactory" />
        <property name="destinationName" value="${activemq.aws.rekognition.ingestQueue}" />
        <property name="messageListener" ref="AWSRekognitionProcessor2" />
    </bean>

    <bean id="jmsContainer3" class="org.springframework.jms.listener.DefaultMessageListenerContainer">
        <property name="connectionFactory" ref="jmsFactory" />
        <property name="destinationName" value="${activemq.aws.rekognition.ingestQueue}" />
        <property name="messageListener" ref="AWSRekognitionProcessor3" />
    </bean>


    <bean id="WorkflowReceiver" class="com.shamik.dev.cts.labweek.movieAnalysis.processor.WorkflowNotifProcessor" >
        <constructor-arg ref="myJmsTemplate"></constructor-arg>
        <property name="tg" ref="TokenGenerator"></property>
        <property name="outputResultQueue" value="${activemq.aws.rekognition.ingestQueue}"></property>
        <property name="accountName" value="${account.name}"  ></property>
        <property name="profileId" value="http://data.publish.theplatform.com/publish/data/PublishProfile/27076980"></property>
    </bean>

    <bean id="MediaConnector" class="com.shamik.dev.cts.labweek.movieAnalysis.mpx.services.MediaConnector">
        <property name="mediaUrl"  value="${media.url}"></property>
    </bean>

    <!--<bean id="ProcessVideo" class="com.shamik.dev.cts.labweek.movieAnalysis.video.encode.GenerateThumbnails">
        <property name="secondsBetweenFrames" value="${video.secondsBetweenFrames}"></property>
    </bean> -->

    <bean id="FtpConnector" class="com.shamik.dev.cts.labweek.movieAnalysis.mpx.services.FtpConnector">
        <property name="username" value="${ftp.default.username}"></property>
        <property name="password" value="${ftp.default.password}"></property>
        <property name="domain" value="${ftp.default.domain}"></property>
    </bean>
    
    <bean id="AWSRekognitionProcessor1" init-method="init" class="com.shamik.dev.cts.labweek.movieAnalysis.processor.AWSRekognitionProcessor">
        <constructor-arg ref="myJmsTemplate"></constructor-arg>
        <property name="outputQueue" value="${activemq.elasticsearch.ingestQueue}"></property>
    </bean>

    <bean id="AWSRekognitionProcessor2" init-method="init" class="com.shamik.dev.cts.labweek.movieAnalysis.processor.AWSRekognitionProcessor">
        <constructor-arg ref="myJmsTemplate"></constructor-arg>
        <property name="outputQueue" value="${activemq.elasticsearch.ingestQueue}"></property>
    </bean>

    <bean id="AWSRekognitionProcessor3" init-method="init" class="com.shamik.dev.cts.labweek.movieAnalysis.processor.AWSRekognitionProcessor">
        <constructor-arg ref="myJmsTemplate"></constructor-arg>
        <property name="outputQueue" value="${activemq.elasticsearch.ingestQueue}"></property>
    </bean>

    <bean id="ImageContainer" class="com.shamik.dev.cts.labweek.movieAnalysis.mpx.dataobjects.custom.ImageInfoContainer" scope="prototype">

    </bean>

    <bean id="ElasticSearchProcessor1" class="com.shamik.dev.cts.labweek.movieAnalysis.processor.ElasticSearchProcessor">
        <property name="httpEndPoint" value="${elasticsearch.httpendpoint}"></property>
        <property name="indexName" value="${elasticsearch.index}"></property>
    </bean>

    <bean id="ElasticSearchProcessor2" class="com.shamik.dev.cts.labweek.movieAnalysis.processor.ElasticSearchProcessor">
        <property name="httpEndPoint" value="${elasticsearch.httpendpoint}"></property>
        <property name="indexName" value="${elasticsearch.index}"></property>
    </bean>


    <bean id="jmsContainerForElasticSearch1" class="org.springframework.jms.listener.DefaultMessageListenerContainer">
        <property name="connectionFactory" ref="jmsFactory" />
        <property name="destinationName" value="${activemq.elasticsearch.ingestQueue}" />
        <property name="messageListener" ref="ElasticSearchProcessor1" />
    </bean>

    <bean id="jmsContainerForElasticSearch2" class="org.springframework.jms.listener.DefaultMessageListenerContainer">
        <property name="connectionFactory" ref="jmsFactory" />
        <property name="destinationName" value="${activemq.elasticsearch.ingestQueue}" />
        <property name="messageListener" ref="ElasticSearchProcessor2" />
    </bean>

</beans>

